{"version":3,"sources":["app/components/page/index.js","app/routes/home/HomeReducer.js","rootReducer.js","store.js","serviceWorker.js","app/components/header/index.js","app/routes/not-found/index.js","app/routes/index.js","app/app.js","index.js","app/routes/home/HomeConstants.js"],"names":["defaultImage","concat","Page","pathname","title","_ref","description","image","contentType","twitter","noCrawl","published","updated","category","tags","theTitle","substring","theDescription","theImage","metaTags","itemprop","content","name","property","push","_this$props","this","props","children","id","className","rest","Object","C_Abhishar_demo_cra_ssr_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","react_helmet__WEBPACK_IMPORTED_MODULE_8___default","htmlAttributes","lang","itemscope","undefined","itemtype","schema","link","rel","href","location","meta","getMetaTags","Component","withRouter","initialState","home","combineReducers","defineProperty","HOME_STATE_KEY","state","arguments","length","type","payload","HOME_SAVE_USERS","assign","users","isServer","window","document","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","header","react_default","Link","to","not_found","page","Homepage","Loadable","loader","Promise","all","__webpack_require__","e","bind","loading","About","routes","Switch","Route","exact","path","component","NotFound","App","URL","process","origin","addEventListener","fetch","response","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","url","history","createMemoryHistory","initialEntries","createBrowserHistory","middleware","routerMiddleware","composedEnhancers","compose","apply","applyMiddleware","__PRELOADED_STATE__","store","createStore","connectRouter","rootReducer","Application","es","connected_react_router_lib","react_frontload_lib","noServerRender","app","root","querySelector","hasChildNodes","preloadReady","hydrate","render","d","__webpack_exports__"],"mappings":"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","file":"static/js/main.772393e7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst SITE_URL =\r\n  process.env.NODE_ENV === \"development\" ? \"http://localhost:3000\" : \"\";\r\n\r\nconst FACEBOOK_APP_ID = \"XXXXXXXXX\";\r\n\r\nconst defaultTitle = \"My Website\";\r\nconst defaultDescription =\r\n  \"This is a really awesome website where we can render on the server. Supa cool.\";\r\nconst defaultImage = `${SITE_URL}`; //`${SITE_URL}${logo}`\r\nconst defaultTwitter = \"@cereallarceny\";\r\nconst defaultSep = \" | \";\r\n\r\nclass Page extends Component {\r\n  getMetaTags(\r\n    {\r\n      title,\r\n      description,\r\n      image,\r\n      contentType,\r\n      twitter,\r\n      noCrawl,\r\n      published,\r\n      updated,\r\n      category,\r\n      tags\r\n    },\r\n    pathname\r\n  ) {\r\n    const theTitle = title\r\n      ? (title + defaultSep + defaultTitle).substring(0, 60)\r\n      : defaultTitle;\r\n    const theDescription = description\r\n      ? description.substring(0, 155)\r\n      : defaultDescription;\r\n    const theImage = image ? `${SITE_URL}${image}` : defaultImage;\r\n\r\n    const metaTags = [\r\n      { itemprop: \"name\", content: theTitle },\r\n      { itemprop: \"description\", content: theDescription },\r\n      { itemprop: \"image\", content: theImage },\r\n      { name: \"description\", content: theDescription },\r\n      { name: \"twitter:card\", content: \"summary_large_image\" },\r\n      { name: \"twitter:site\", content: defaultTwitter },\r\n      { name: \"twitter:title\", content: theTitle },\r\n      { name: \"twitter:description\", content: theDescription },\r\n      { name: \"twitter:creator\", content: twitter || defaultTwitter },\r\n      { name: \"twitter:image:src\", content: theImage },\r\n      { property: \"og:title\", content: theTitle },\r\n      { property: \"og:type\", content: contentType || \"website\" },\r\n      { property: \"og:url\", content: SITE_URL + pathname },\r\n      { property: \"og:image\", content: theImage },\r\n      { property: \"og:description\", content: theDescription },\r\n      { property: \"og:site_name\", content: defaultTitle },\r\n      { property: \"fb:app_id\", content: FACEBOOK_APP_ID }\r\n    ];\r\n\r\n    if (noCrawl) {\r\n      metaTags.push({ name: \"robots\", content: \"noindex, nofollow\" });\r\n    }\r\n\r\n    if (published) {\r\n      metaTags.push({ name: \"article:published_time\", content: published });\r\n    }\r\n    if (updated) {\r\n      metaTags.push({ name: \"article:modified_time\", content: updated });\r\n    }\r\n    if (category) {\r\n      metaTags.push({ name: \"article:section\", content: category });\r\n    }\r\n    if (tags) {\r\n      metaTags.push({ name: \"article:tag\", content: tags });\r\n    }\r\n\r\n    return metaTags;\r\n  }\r\n\r\n  render() {\r\n    const { children, id, className, ...rest } = this.props;\r\n\r\n    return (\r\n      <div id={id} className={className}>\r\n        <Helmet\r\n          htmlAttributes={{\r\n            lang: \"en\",\r\n            itemscope: undefined,\r\n            itemtype: `http://schema.org/${rest.schema || \"WebPage\"}`\r\n          }}\r\n          title={\r\n            rest.title ? rest.title + defaultSep + defaultTitle : defaultTitle\r\n          }\r\n          link={[\r\n            {\r\n              rel: \"canonical\",\r\n              href: SITE_URL + this.props.location.pathname\r\n            }\r\n          ]}\r\n          meta={this.getMetaTags(rest, this.props.location.pathname)}\r\n        />\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Page);\r\n","import { HOME_SAVE_USERS } from './HomeConstants';\r\n\r\nconst initialState = {home : 'HomePage'};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case HOME_SAVE_USERS:\r\n      return Object.assign({}, state, {users : payload});\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\n\r\n// Home Reducer\r\nimport { HOME_STATE_KEY } from './app/routes/home/HomeConstants';\r\nimport HomeReducer from './app/routes/home/HomeReducer';\r\n\r\nexport default combineReducers({\r\n  [HOME_STATE_KEY] : HomeReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { createBrowserHistory, createMemoryHistory } from 'history';\r\nimport rootReducer from './rootReducer';\r\n\r\n// A nice helper to tell us if we're on the server\r\nexport const isServer = !(\r\n  typeof window !== 'undefined' &&\r\n  window.document &&\r\n  window.document.createElement\r\n);\r\n\r\nexport default (url = '/') => {\r\n  // Create a history depending on the environment\r\n  const history = isServer\r\n    ? createMemoryHistory({\r\n        initialEntries: [url]\r\n      })\r\n    : createBrowserHistory();\r\n\r\n  const enhancers = [];\r\n\r\n  // Dev tools are helpful\r\n  if (process.env.NODE_ENV === 'development' && !isServer) {\r\n    const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\n\r\n    if (typeof devToolsExtension === 'function') {\r\n      enhancers.push(devToolsExtension());\r\n    }\r\n  }\r\n\r\n  const middleware = [routerMiddleware(history)];\r\n  const composedEnhancers = compose(\r\n    applyMiddleware(...middleware),\r\n    ...enhancers\r\n  );\r\n\r\n  // Do we have preloaded state available? Great, save it.\r\n  const initialState = !isServer ? window.__PRELOADED_STATE__ : {};\r\n\r\n  // Delete it once we have it stored in a variable\r\n  if (!isServer) {\r\n    delete window.__PRELOADED_STATE__;\r\n  }\r\n\r\n  // Create the store\r\n  const store = createStore(\r\n    connectRouter(history)(rootReducer),\r\n    initialState,\r\n    composedEnhancers\r\n  );\r\n\r\n  return {\r\n    store,\r\n    history\r\n  };\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default () => (\r\n  <header id=\"header\">\r\n    <Link to=\"/\"> Home </Link> |<Link to=\"/about\"> About </Link> |\r\n    <Link to=\"/not-found\"> Not Found </Link>\r\n  </header>\r\n);\r\n","import React from 'react';\r\nimport Page from '../../components/page';\r\n\r\nexport default () => (\r\n  <Page\r\n    id=\"not-found\"\r\n    title=\"Not Found\"\r\n    description=\"This is embarrassing.\"\r\n    noCrawl\r\n  >\r\n    <p>Super embarrassing.</p>\r\n  </Page>\r\n);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Loadable from \"react-loadable\";\r\n\r\nimport NotFound from \"./not-found\";\r\n\r\nconst Homepage = Loadable({\r\n  loader: () => import(/* webpackChunkName: \"homepage\" */ \"./home/home\"),\r\n  loading: () => null\r\n});\r\n\r\nconst About = Loadable({\r\n  loader: () => import(/* webpackChunkName: \"about\" */ \"./about\"),\r\n  loading: () => null\r\n});\r\n\r\nexport default () => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={Homepage} />\r\n    <Route exact path=\"/about\" component={About} />\r\n    <Route component={NotFound} />\r\n  </Switch>\r\n);\r\n","import '@babel/polyfill';\r\nimport React, { Component } from \"react\";\r\nimport Header from \"./components/header\";\r\nimport Routes from \"./routes\";\r\nimport \"./styles/main.scss\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"app\">\r\n        <Header />\r\n        <div id=\"content\">\r\n          <Routes />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render, hydrate } from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport Loadable from \"react-loadable\";\r\nimport { Frontload } from \"react-frontload\";\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\nimport createStore from \"./store\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./app/app\";\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\n// Create a store and get back itself and its history object\r\nconst { store, history } = createStore();\r\n\r\n// Running locally, we should run on a <ConnectedRouter /> rather than on a <StaticRouter /> like on the server\r\n// Let's also let React Frontload explicitly know we're not rendering on the server here\r\nconst Application = (\r\n  <Provider store={store}>\r\n    <ConnectedRouter history={history}>\r\n      <Frontload noServerRender={true}>\r\n        <App />\r\n      </Frontload>\r\n    </ConnectedRouter>\r\n  </Provider>\r\n);\r\n\r\nconst root = document.querySelector(\"#root\");\r\n\r\nif (root.hasChildNodes() === true) {\r\n  // If it's an SSR, we use hydrate to get fast page loads by just\r\n  // attaching event listeners after the initial render\r\n  Loadable.preloadReady().then(() => {\r\n    hydrate(Application, root);\r\n  });\r\n} else {\r\n  // If we're not running on the server, just render like normal\r\n  render(Application, root);\r\n}\r\n","export const HOME_STATE_KEY = \"home\";\r\nexport const HOME_SAVE_USERS = \"HOME_SAVE_USERS\";\r\n"],"sourceRoot":""}